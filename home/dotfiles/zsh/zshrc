# Unalias conflicting commands
unalias l 2>/dev/null
unalias ls 2>/dev/null

# Ensure zplug is installed
if [ ! -d "$HOME/.zplug" ]; then
  git clone https://github.com/zplug/zplug ~/.zplug
fi
export ZPLUG_USE_CACHE=true
source ~/.zplug/init.zsh

# Enable completions
autoload -Uz compinit
compinit -C

# Declare plugins
zplug "hlissner/zsh-autopair"
zplug "zsh-users/zsh-autosuggestions"
zplug "zsh-users/zsh-syntax-highlighting"
zplug "romkatv/powerlevel10k", as:theme, depth:1

# Install missing plugins automatically
if ! zplug check --verbose; then
  echo "Installing missing plugins..."
  zplug install
fi

# Load p10k config
[[ -f ~/.p10k.zsh ]] && source ~/.p10k.zsh

# Load everything
zplug load

# Tree listing function with level parameter
l() {
    local level=1
    local args=()
    
    while [[ $# -gt 0 ]]; do
        case $1 in
            -l)
                if [[ $# -ge 2 ]]; then
                    level=$2
                    shift 2
                    continue
                fi
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done
    
    eza -a --tree --level=$level --icons "${args[@]}"
}

# Enhanced navigation functions
cd() {
    if [[ $# -eq 0 ]]; then
        z "$HOME"
    else
        z "$@"
    fi
}

# Enhanced fzf function with clipboard integration
fzf() {
    local selection
    selection=$(command fzf "$@")
    if [[ -n "$selection" ]]; then
        echo "$selection" | wl-copy
        echo "$selection"
    fi
}

# Custom functions
dcp() {
    if [[ -z "$1" ]]; then
        echo "Usage: dcp <file or directory>"
        return 1
    fi
    local dir=$(realpath "$1")
    echo -n "$dir" | wl-copy
    echo "Copied to clipboard: $dir"
}

dcut() {
    if [[ -z "$1" ]]; then
        echo "Usage: dcut <file or directory>"
        return 1
    fi
    local dir=$(realpath "$1")
    echo -n "CUT:$dir" | wl-copy
    echo "Cut to clipboard: $dir"
}

dpaste() {
    local dest=${1:-.}
    local clip=$(wl-paste)
    if [[ "$clip" == CUT:* ]]; then
        local dir="${clip#CUT:}"
        mv "$dir" "$dest"
        echo "Moved: $dir -> $dest"
    else
        cp -r "$clip" "$dest"
        echo "Copied: $clip -> $dest"
    fi
}

make-flake() {
    local flakefile="flake.nix"
    if [[ -e "$flakefile" ]]; then
        echo "$flakefile already exists. Aborting." >&2
        return 1
    fi
    cp ~/nixos-configuration/templates/flake.nix "$flakefile"
    echo "Created $flakefile from ~/nixos-configuration/templates/flake.nix in $(pwd)"
}

nix-develop() {
    nix develop "$@" --command env SHELL=$(which zsh) zsh --login
}

nix-shell() {
    export NIX_SHELL="$@"
    command nix-shell "$@" --run "env SHELL=$(which zsh) zsh --login"
}

nxreb() {
    source ~/nixos-configuration/.env
    sudo nixos-rebuild switch --flake ~/nixos-configuration/#$NIX_HOST
}

nxupdate() {
    source ~/nixos-configuration/.env
    sudo nix flake update
    sudo nixos-rebuild switch --flake ~/nixos-configuration/#$NIX_HOST
}

vfzf() {
    local cols=$(tput cols)
    local file
    if (( cols > 160 )); then
        file=$(fzf --height=70% --layout=reverse --info=inline --border --margin=1 --padding=1 \
            --preview 'bat --color=always --style=header,grid --line-range :300 {}' \
            --preview-window 'right:50%:wrap')
    else
        file=$(fzf --height=70% --layout=reverse --info=inline --border --margin=1 --padding=1)
    fi
    if [[ -n "$file" ]]; then
        $EDITOR "$file"
    fi
}
